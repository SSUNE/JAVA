
TODO 복습문제

[001]
OOP : Obeject oriented Programming

[002]
객체시향 프로그램에 대해서 정의를 내리시오.
현실세계에 존재하는 객체모델들을 구조화하여 개발하는 프로그램

[003]
class vs Object vs Instance의 차이점
class : 설계도
Object : 틀, interface, 실체화가가능한 것
Instance : new,실체화 한것

Day002() [name : null | price : 0 | show()] - 자동호출
Day002() -> { 기본생성자는 자동으로 호출되어 실질적으로 공간을 사용가능하게 초기화를 해준다. ; }

------------------------------------------------------------------------------------------------------------------------
TODO 오늘자 진도

[001] 생성자
1. 생성자
    - [초기화]하는 역활
    - [클래스 생성]할때 제일 먼저 실행되는 특수한 형태의 메소드
    - 메소드의 일반형식에는 리턴값이 있지만 생성자는 [리턴값이 없다]
        int         a (         ) {}
        리턴값    메서드명(         ) {}

        class A {
            A(){} // 생성자
        }
    - 생성자는 [클래스명과 동일] 해야함.

2. 기본생성자를 반드시 선언해야하는 경우
    - 하나의 클래스에 여러개의 생성자가 있을 수 있음.
    - [오버로딩]이 되면 기본생성자는 자동으로 생성되지 않음.
    - 기본생성자는 하는 일이 없어도[상속]시 에러를 발생하는 경우가 있으므로 수동적으로 무조건 선언하는 것을 권장함.


001. JVM (JAVA Virtual Machine)
    - 자바가상머신으로 자바바이트코드를 실행할 수 있는 주체
    - 바이트코드를 해당운영체제가 이해할 수 있는 기계어로 바꿔 실행시켜주는 역활

    [java파일] A. java
            | --------------------------- javac A.java
    [class파일] A. class
            | --------------------------- java  A


002. JVM의 구성
https://namu.wiki/w/자바%20가상%20머신?from=Java%20Virtual%20Machine

[Class Loader]      [Execution Engine]      [Garbage Collector]
↑↓                  ↑↓                      ↑↓
---------------------------------------------------------------
[Runtime Data Area]
---------------------------------------------------------------
1. Class Loader : .class(바이트코드)파일들을 엮어서 JVM인 운영체제로부터 할당받은 메모리영역이 [Runtime Data Area]dp 적재하는 역활
2. Execution Engine : 적재class(바이트코드)파일들을 기계어로 번경해 명령어단위로 실행하는 역활
3. Garbage Collector : Heap 메모리 영역에 생성된 객체들 중에 참조되지 않은 객체들을 탐색후 제거
4. Runtime Data Area : Method area, heap area, pc register, navtive method stack

































